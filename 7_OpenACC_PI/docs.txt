# OpenACC PI Calculation Example

## Concept
This program demonstrates the calculation of π (pi) using the Monte Carlo method, comparing a standard CPU implementation with an OpenACC-accelerated version. OpenACC is a directive-based parallel programming model for heterogeneous computing.

## Components
- pi.cpp: Standard CPU implementation of Monte Carlo π calculation
- openACC_PI.cpp: OpenACC-accelerated implementation with parallelization directives
- pi: Compiled CPU executable
- openACCPI: Compiled OpenACC executable
- run.txt: Commands for execution

## Program Flow
1. Generate a large number of random points (x,y) within a square of side length 1
2. Count the number of points that fall within a quarter circle of radius 1
3. Calculate π as 4 times the ratio of points inside the circle to total points
4. Measure and report execution time for both implementations

## Key Concepts Demonstrated
- Monte Carlo simulation method
- OpenACC parallelization directives
- Reduction operations in parallel computing
- Statistical probability approximation
- GPU acceleration through directive-based programming
- Performance comparison between CPU and accelerated code

## Usage
Run both executables to compare their performance. The OpenACC version should demonstrate faster execution through parallelization. The program uses 1 million random points to approximate the value of π (3.14159...). 